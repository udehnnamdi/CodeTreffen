{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\HP\\\\Desktop\\\\code-treffen\\\\pages\\\\[treffenId]\\\\index.js\";\nimport { MongoClient, ObjectId } from 'mongodb';\nimport TreffenDetail from '../../components/treffen/TreffenDetail';\n\nfunction TreffenDetails(props) {\n  return /*#__PURE__*/_jsxDEV(TreffenDetail, {\n    image: props.treffenData.image,\n    title: props.treffenData.title,\n    address: props.treffenData.address,\n    description: props.treffenData.description\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }, this);\n}\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect('mongodb+srv://udehnnamdi:We0ZPRksScfRAMjD@cluster0.wlpvc.mongodb.net/codeTreffen?retryWrites=true&w=majority');\n  const db = client.db();\n  const treffenCollection = db.collection('codeTreffen');\n  const treffen = await treffenCollection.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  return {\n    fallback: false,\n    paths: treffen.map(treff => ({\n      params: {\n        treffenId: treff._id.toString()\n      }\n    }))\n  };\n}\nexport async function getStaticProps(context) {\n  const treffenId = context.params.treffenId;\n  const client = await MongoClient.connect('mongodb+srv://udehnnamdi:We0ZPRksScfRAMjD@cluster0.wlpvc.mongodb.net/codeTreffen?retryWrites=true&w=majority');\n  const db = client.db();\n  const treffenCollection = db.collection('codeTreffen');\n  const selectedTreffen = await treffenCollection.findOne({\n    _id: ObjectId(treffenId)\n  });\n  client.close();\n  return {\n    props: {\n      treffenData: {\n        id: selectedTreffen._id.toString(),\n        title: selectedTreffen.title,\n        address: selectedTreffen.address,\n        image: selectedTreffen.image,\n        description: selectedTreffen.description\n      }\n    }\n  };\n}\nexport default TreffenDetails;","map":{"version":3,"sources":["C:/Users/HP/Desktop/code-treffen/pages/[treffenId]/index.js"],"names":["MongoClient","ObjectId","TreffenDetail","TreffenDetails","props","treffenData","image","title","address","description","getStaticPaths","client","connect","db","treffenCollection","collection","treffen","find","_id","toArray","close","fallback","paths","map","treff","params","treffenId","toString","getStaticProps","context","selectedTreffen","findOne","id"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,SAAtC;AAEA,OAAOC,aAAP,MAA0B,wCAA1B;;AAEA,SAASC,cAAT,CAAwBC,KAAxB,EAA+B;AAC7B,sBACE,QAAC,aAAD;AACE,IAAA,KAAK,EAAEA,KAAK,CAACC,WAAN,CAAkBC,KAD3B;AAEE,IAAA,KAAK,EAAEF,KAAK,CAACC,WAAN,CAAkBE,KAF3B;AAGE,IAAA,OAAO,EAAEH,KAAK,CAACC,WAAN,CAAkBG,OAH7B;AAIE,IAAA,WAAW,EAAEJ,KAAK,CAACC,WAAN,CAAkBI;AAJjC;AAAA;AAAA;AAAA;AAAA,UADF;AAQD;;AAED,OAAO,eAAeC,cAAf,GAAgC;AACrC,QAAMC,MAAM,GAAG,MAAMX,WAAW,CAACY,OAAZ,CACnB,8GADmB,CAArB;AAGA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,aAAd,CAA1B;AAEA,QAAMC,OAAO,GAAG,MAAMF,iBAAiB,CAACG,IAAlB,CAAuB,EAAvB,EAA2B;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAA3B,EAAuCC,OAAvC,EAAtB;AAEAR,EAAAA,MAAM,CAACS,KAAP;AAEA,SAAO;AACLC,IAAAA,QAAQ,EAAE,KADL;AAELC,IAAAA,KAAK,EAAEN,OAAO,CAACO,GAAR,CAAaC,KAAD,KAAY;AAC7BC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,SAAS,EAAEF,KAAK,CAACN,GAAN,CAAUS,QAAV;AAAb;AADqB,KAAZ,CAAZ;AAFF,GAAP;AAMD;AAED,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAG5C,QAAMH,SAAS,GAAGG,OAAO,CAACJ,MAAR,CAAeC,SAAjC;AAEA,QAAMf,MAAM,GAAG,MAAMX,WAAW,CAACY,OAAZ,CACnB,8GADmB,CAArB;AAGA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,aAAd,CAA1B;AAEA,QAAMe,eAAe,GAAG,MAAMhB,iBAAiB,CAACiB,OAAlB,CAA0B;AACtDb,IAAAA,GAAG,EAAEjB,QAAQ,CAACyB,SAAD;AADyC,GAA1B,CAA9B;AAIAf,EAAAA,MAAM,CAACS,KAAP;AAEA,SAAO;AACLhB,IAAAA,KAAK,EAAE;AACLC,MAAAA,WAAW,EAAE;AACX2B,QAAAA,EAAE,EAAEF,eAAe,CAACZ,GAAhB,CAAoBS,QAApB,EADO;AAEXpB,QAAAA,KAAK,EAAEuB,eAAe,CAACvB,KAFZ;AAGXC,QAAAA,OAAO,EAAEsB,eAAe,CAACtB,OAHd;AAIXF,QAAAA,KAAK,EAAEwB,eAAe,CAACxB,KAJZ;AAKXG,QAAAA,WAAW,EAAEqB,eAAe,CAACrB;AALlB;AADR;AADF,GAAP;AAWD;AAED,eAAeN,cAAf","sourcesContent":["import { MongoClient, ObjectId } from 'mongodb';\r\n\r\nimport TreffenDetail from '../../components/treffen/TreffenDetail';\r\n\r\nfunction TreffenDetails(props) {\r\n  return (\r\n    <TreffenDetail\r\n      image={props.treffenData.image}\r\n      title={props.treffenData.title}\r\n      address={props.treffenData.address}\r\n      description={props.treffenData.description}\r\n    />\r\n  );\r\n}\r\n\r\nexport async function getStaticPaths() {\r\n  const client = await MongoClient.connect(\r\n    'mongodb+srv://udehnnamdi:We0ZPRksScfRAMjD@cluster0.wlpvc.mongodb.net/codeTreffen?retryWrites=true&w=majority'\r\n);\r\n  const db = client.db();\r\n\r\n  const treffenCollection = db.collection('codeTreffen');\r\n\r\n  const treffen = await treffenCollection.find({}, { _id: 1 }).toArray();\r\n\r\n  client.close();\r\n\r\n  return {\r\n    fallback: false,\r\n    paths: treffen.map((treff) => ({\r\n      params: { treffenId: treff._id.toString() },\r\n    })),\r\n  };\r\n}\r\n\r\nexport async function getStaticProps(context) {\r\n \r\n\r\n  const treffenId = context.params.treffenId;\r\n\r\n  const client = await MongoClient.connect(\r\n    'mongodb+srv://udehnnamdi:We0ZPRksScfRAMjD@cluster0.wlpvc.mongodb.net/codeTreffen?retryWrites=true&w=majority'\r\n);\r\n  const db = client.db();\r\n\r\n  const treffenCollection = db.collection('codeTreffen');\r\n\r\n  const selectedTreffen = await treffenCollection.findOne({\r\n    _id: ObjectId(treffenId),\r\n  });\r\n\r\n  client.close();\r\n\r\n  return {\r\n    props: {\r\n      treffenData: {\r\n        id: selectedTreffen._id.toString(),\r\n        title: selectedTreffen.title,\r\n        address: selectedTreffen.address,\r\n        image: selectedTreffen.image,\r\n        description: selectedTreffen.description,\r\n      },\r\n    },\r\n  };\r\n}\r\n\r\nexport default TreffenDetails;"]},"metadata":{},"sourceType":"module"}